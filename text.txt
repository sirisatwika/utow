import { useState, useEffect } from 'react';
import axios from 'axios';

function MyComponent() {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        let values = null;
        for (let i = 0; i < 1; i++) {
          axios.get('http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor')
            .then((response) => {
              console.log(response.data);
              const resvalues = response.data.CarbondioxideSensor;
              if (resvalues.length >= 2) {
                values = [resvalues[0], resvalues[1]];
                console.log('Minimum value:', resvalues[0]);
                console.log('Maximum value:', resvalues[1]);
                setData(values);
                console.log('Data set to:', values);
              } else {
                console.error('Unexpected response format.');
              }
            });
        }
      } catch (error) {
        console.error(error);
      }
    };
    fetchData();
  }, []);

  return (
    <div>
      <h1>Data:</h1>
      <ul>
        {data.map((value, index) => (
          <li key={index}>{value}</li>
        ))}
      </ul>
    </div>
  );
}




    let [data, setData] = useState([]);
	let [devicesn, setDevicesn] = useState([]);
	
    useEffect(() => {
    const fetchData = async()=>{
    	//axios.get('http://localhost:5000/api/v1/gateway/name/getdevicenames/all')
	//	.then(response =>{
	//	console.log(response.data);
	//	setDevicesn(response.data);
	//	})
	//	.catch(console.error);
         try{
         let min = null;
         let max = null;
     	 let values = null;
         	for (let i = 0; i < 1; i++) {
                //for (let i = 0; i < devicesn.length; i++) {
                    axios.get('http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor')
		  .then((response) => {
		    console.log(response.data);
		    const resvalues = response.data.CarbondioxideSensor;
		    
		    if (resvalues.length >= 2) {
		      values = [resvalues[0], resvalues[1]];
		      console.log('Minimum value:', resvalues[0]);
		      console.log('Maximum value:', resvalues[1]);
		    } else {
		      console.error('Unexpected response format.');
		    }
		  }); 
		  setData(values);
		  console.log("values set");
		  console.log(data);      
                } 
            } catch (error) {
                console.error(error);
            }
            };
            fetchData();
        }, []); 























X3Object { CarbondioxideSensor: (2) [â€¦] }

CarbondioxideSensor: Array [ "60", "1000" ]

0: "60"

1: "1000"

length: 2


let value = "";
   let v = [];
                    //let value = "";
                    axios.get(`http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor`)
                    .then((response) => {
                    console.log(response.data);
                    value = Object.values(response.data.CarbondioxideSensor[0]);
		    console.log(value);                   
                   // resourceName = (response.data.min);
                    //value = Object.values(response.data);
                   // v.push({min: resourceName, devvalue : value });
                    setData(data);
                    });    
		    

@app.route('/api/v1/gateway/data/minmax/<devicename>')
@cross_origin()
def getdataminmax(devicename):
    try:
        apiurl = "http://localhost:59881/api/v2/deviceprofile/name/"+str(devicename)
        response = requests.get(apiurl)
        pro = response.json()['profile']
        lst = []
        maximum = pro['deviceResources'][0]['properties']['maximum']
        minimum = pro['deviceResources'][0]['properties']['minimum']
        lst.append(minimum)
        lst.append(maximum)
        r = {
        devicename : lst
        }
        return json.dumps(r)
    except Exception as e:
        return str(e)

let min = null;
let max = null;

axios.get('http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor')
  .then((response) => {
    console.log(response.data);
    const values = response.data.CarbondioxideSensor;
    if (values.length >= 2) {
      min = values[0];
      max = values[1];
      console.log('Minimum value:', min);
      console.log('Maximum value:', max);
    } else {
      console.error('Unexpected response format.');
    }
  })
  .catch((error) => {
    console.error('Error retrieving min/max values:', error);
  });


let min = null;
let max = null;

axios.get('http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor')
  .then((response) => {
    console.log(response.data);
    const values = response.data.CarbondioxideSensor;
    if (values.length >= 2) {
      min = values[0];
      max = values[1];
      console.log('Minimum value:', min);
      console.log('Maximum value:', max);
    } else {
      console.error('Unexpected response format.');
    }
  })
  .catch((error) => {
    console.error('Error retrieving min/max values:', error);
  });


let values = null;

axios.get('http://localhost:5000/api/v1/gateway/data/minmax/CarbondioxideSensor')
  .then((response) => {
    console.log(response.data);
    const responseValues = response.data.CarbondioxideSensor;
    if (responseValues.length >= 2) {
      values = [responseValues[0], responseValues[1]];
      console.log('Minimum value:', values[0]);
      console.log('Maximum value:', values[1]);
    } else {
      console.error('Unexpected response format.');
    }
    setData(values);
  })
  .catch((error) => {
    console.error('Error retrieving min/max values:', error);
  });
