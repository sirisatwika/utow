[{
    "ActiveInactive": "",
    "AssociatedGatewayProfile": "",
    "AssociatedServiceProtocol": "",
    "IOTDeviceName": "",
    "IPAddress": "",
    "IotDeviceID": "",
    "LastCommunicatedTime": "",
    "PortNumber": "",
    "ProvisionedDateTime": "",
    "ProvisionedMethod": "",
    "ProvisionedStatus": "",
    "Status": "online",
    "description": ,
    "location": 
  },...]










@app.route('/api/v1/gateway/telemetrydata/all')
@cross_origin()
def gettelemetrydataall():
    unique_device_names = set()
    devices_info = []
    try:
        apiurlmain = "http://localhost:59881/api/v2/device/all?limit=-1"
        responsemain = requests.get(apiurl)
        devicelistmain = response.json()['devices']
        for device in deviceslistmain:
            device_name = device['name']
            if device_name not in unique_device_names:
                unique_device_names.add(device_name)
        
        apiurl1 = "http://localhost:59881/api/v2/device/name/"+str(devicename)
        resdevname = requests.get(apiurl1)
        devproname = resdevname.json()['device']['profileName']  
        apiurl2 = "http://localhost:59881/api/v2/deviceprofile/name/"+str(devproname)
        resdevproname = requests.get(apiurl2)
        devresname = resdevproname.json()['profile']['deviceResources']
        devrescnt = len(devresname)
        
        apiurl = "http://localhost:59880/api/v2/reading/device/name/"+str(devicename)
        response = requests.get(apiurl)
        readingslist = response.json()['readings']
        #print(type(readingslist))
        #print(readingslist[0])
        i = 0
        lst = []
        while i < devrescnt:
            resource_name = readingslist[i]['resourceName']
            res = readingslist[i]['value'] 
            res2 = float(res)
            if 'units' in readingslist[i]:
                units = readingslist[i]['units']
            else:
                units = ""
            print(units)
            num = '{0:.2f}'.format(res2)
            r = {
             resource_name : [num, units] 
            }
            i = i + 1
            lst.append(r)
        return json.dumps(lst)
    except Exception as e:
        return e

