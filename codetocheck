@iotd.route('/api/v1/name/getiotdevicedetails/all')
class IoTDeviceDetailsDataCollection(Resource):
    '''List of gateways details for data collection'''
    @ns.doc('GatewaysdetailDataCollection')
    @cross_origin()
    @api.response(200,'Success..')
    @api.response(400,'Invalid input')
    @api.response(404,'Page Not Found')
    @api.response(500,'Internal Server Error')
    def get(self):
        '''Get the list of gateways detail for configuration'''
        unique_device_names = set()
        devices_info = []
        try:  
             apiurl = "http://localhost:59881/api/v2/device/all?limit=-1"
             #print(apiurl)
             response = requests.get(apiurl)
             #print(response.json())
             p = response.json()['devices']
             #print(p)
             #print("next IP")
             ip = '127.0.0.1'
             if 'protocols' in p:
                 for k,v in p.items():
                      print(v)
                      if 'Address' in p['protocols'].items():
                          ip = v['Address']    
             print("printing IP")
             print(ip)                                                     
             apiurl2='http://'+ip+':59881/api/v2/device/all?limit=-1'
             response2 = requests.get(apiurl2)
             devicelist = response2.json()['devices']
             print(response2)
             for g in devicelist:
                 device_name = g['name']
                 if device_name not in unique_device_names:
                     unique_device_names.add(device_name)
                     gatewayip = '127.0.0.1'
                     gatewayport = 0
                     pdata={}
                     if 'protocols' in g:
                         for k,v in g['protocols'].items():
                             pdata=v
                         if 'Address' in pdata:
                             gatewayip = pdata['Address']
                         if 'Port' in pdata:
                             gatewayport = pdata['Port']
                     status = ''
                     createdtime = g['created']
                     time_in_sec = createdtime / pow(10,9)
                     dt = datetime.fromtimestamp(time_in_sec)
                     form_dt = dt.strftime('%Y-%m-%d %H:%M:%S')
                     print(form_dt)
                     modifiedtime = g['modified']
                     time_in_sec_m = modifiedtime / pow(10,9)
                     dt_m = datetime.fromtimestamp(time_in_sec_m)
                     form_dt_m = dt_m.strftime('%Y-%m-%d %H:%M:%S')
                     apiurl3 = "http://localhost:59881/api/v2/deviceprofile/name/"+g['profileName']
                     res_devpro = requests.get(apiurl3)
                     manufacturername = res_devpro.json()['profile']['manufacturer']
                     if g['operatingState'] == "UP":
                         status = 'online'
                     else:
                         status = 'offline'
                     device_info = [
                        g['id'],
                        g['name'],
                        g['description'],
                        gatewayip,
                        gatewayport,
                        'Hyderabad',
                        
                        '',
                        '',
                        manufacturername,
                        g['profileName'],
                        g['serviceName'],
                        
                        status,
                        'provisioned',
                        'Default',
                        form_dt,
                        'Active',
                        form_dt_m,
                        'NA',
                        'Ubuntu 22.04',
                        'Good',
                        'NA',
                        'NA',
                        'NA'
                     ]
                     devices_info.append(device_info)
                 print(devices_info)
             return devices_info
        except Exception as e:
             return str(e)
