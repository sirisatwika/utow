
@ns.route('/api/v1/telemetrydata/all')
class GatewayTelemetryDataAll(Resource):
     '''Telemetry data for all devices'''
     @ns.doc('TelemetryDataAll')
     @cross_origin()
     @api.response(200,'Success..')
     @api.response(400,'Invalid input')
     @api.response(404,'Page Not Found')
     @api.response(500,'Internal Server Error')
     def get(self):
         '''Get the telemetry data from all devices'''
         unique_device_names = set({})
         devices_info = []
         try:
             apiurlmain = "http://localhost:59881/api/v2/device/all?limit=-1"
             responsemain = requests.get(apiurlmain)
             #print(responsemain.json())
             devicelistmain = responsemain.json()['devices']
             #print(devicelistmain)
             for device in devicelistmain:
                 device_name = device['name']
                 #print(device)
                 if device_name not in unique_device_names:
                     unique_device_names.add(device_name)
                     #print(unique_device_names)
                     devproname = device['profileName']  
                     apiurl2 = "http://localhost:59881/api/v2/deviceprofile/name/"+str(devproname)
                     resdevproname = requests.get(apiurl2)
                     #print(resdevproname)
                     devresname = resdevproname.json()['profile']['deviceResources']
                     devrescnt = len(devresname)  
                     #print(devrescnt)              
                     apiurl = "http://localhost:59880/api/v2/reading/device/name/"+str(device_name)
                     response = requests.get(apiurl)
                     readingslist = response.json()['readings']
                     #print(readingslist)
                     i = 0
                     lst = []
                     while i < devrescnt and readingslist != []:
                         resource_name = readingslist[i]['resourceName']
                         res = readingslist[i]['value'] 
                         num = res
                         if 'units' in readingslist[i]:
                             units = readingslist[i]['units']
                         else:
                             units = ""
                         #print(units)
                         print(type(res))
                         if '.' in res:
                            num = '{0:.2f}'.format(float(res))
                         r = [
                             device_name,
                             resource_name,
                             num,
                             units
                         ]
                         i = i + 1
                         devices_info.append(r)
                     #print(devices_info)
             return json.dumps(devices_info)                                                                 
         except Exception as e:
             return e
